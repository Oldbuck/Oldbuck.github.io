<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Oldbuck</title><link>https://Oldbuck.github.io</link><description>一枚java后端开发</description><copyright>Oldbuck</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/28443023?v=4</url><title>avatar</title><link>https://Oldbuck.github.io</link></image><lastBuildDate>Sat, 11 Jan 2025 03:32:37 +0000</lastBuildDate><managingEditor>Oldbuck</managingEditor><ttl>60</ttl><webMaster>Oldbuck</webMaster><item><title>Git常用命令</title><link>https://Oldbuck.github.io/post/Git-chang-yong-ming-ling.html</link><description>### 仓库&#13;
&#13;
```&#13;
# 在当前目录新建一个Git代码库&#13;
$ git init&#13;
&#13;
# 新建一个目录，将其初始化为Git代码库&#13;
$ git init [project-name]&#13;
&#13;
# 下载一个项目和它的整个代码历史&#13;
$ git clone [url]&#13;
```&#13;
&#13;
### 配置&#13;
&#13;
```&#13;
# 显示当前的Git配置&#13;
$ git config --list&#13;
&#13;
# 编辑Git配置文件&#13;
$ git config -e [--global]&#13;
&#13;
# 设置提交代码时的用户信息&#13;
$ git config [--global] user.name '[name]'&#13;
$ git config [--global] user.email '[email address]'&#13;
```&#13;
&#13;
### 增加/删除文件&#13;
&#13;
```&#13;
# 添加指定文件到暂存区&#13;
$ git add [file1] [file2] ...&#13;
&#13;
# 添加指定目录到暂存区，包括子目录&#13;
$ git add [dir]&#13;
&#13;
# 添加当前目录的所有文件到暂存区&#13;
$ git add .&#13;
&#13;
# 添加每个变化前，都会要求确认&#13;
# 对于同一个文件的多处变化，可以实现分次提交&#13;
$ git add -p&#13;
&#13;
# 删除工作区文件，并且将这次删除放入暂存区&#13;
$ git rm [file1] [file2] ...&#13;
&#13;
# 停止追踪指定文件，但该文件会保留在工作区&#13;
$ git rm --cached [file]&#13;
&#13;
# 改名文件，并且将这个改名放入暂存区&#13;
$ git mv [file-original] [file-renamed]&#13;
```&#13;
&#13;
### 代码提交&#13;
&#13;
```&#13;
# 提交暂存区到仓库区&#13;
$ git commit -m [message]&#13;
&#13;
# 提交暂存区的指定文件到仓库区&#13;
$ git commit [file1] [file2] ... -m [message]&#13;
&#13;
# 提交工作区自上次commit之后的变化，直接到仓库区&#13;
$ git commit -a&#13;
&#13;
# 提交时显示所有diff信息&#13;
$ git commit -v&#13;
&#13;
# 使用一次新的commit，替代上一次提交&#13;
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息&#13;
$ git commit --amend -m [message]&#13;
&#13;
# 重做上一次commit，并包括指定文件的新变化&#13;
$ git commit --amend [file1] [file2] ...&#13;
```&#13;
&#13;
### 分支&#13;
&#13;
```&#13;
# 列出所有本地分支&#13;
$ git branch&#13;
&#13;
# 列出所有远程分支&#13;
$ git branch -r&#13;
&#13;
# 列出所有本地分支和远程分支&#13;
$ git branch -a&#13;
&#13;
# 新建一个分支，但依然停留在当前分支&#13;
$ git branch [branch-name]&#13;
&#13;
# 新建一个分支，并切换到该分支&#13;
$ git checkout -b [branch]&#13;
&#13;
# 新建一个分支，指向指定commit&#13;
$ git branch [branch] [commit]&#13;
&#13;
# 新建一个分支，与指定的远程分支建立追踪关系&#13;
$ git branch --track [branch] [remote-branch]&#13;
&#13;
# 切换到指定分支，并更新工作区&#13;
$ git checkout [branch-name]&#13;
&#13;
# 切换到上一个分支&#13;
$ git checkout -&#13;
&#13;
# 建立追踪关系，在现有分支与指定的远程分支之间&#13;
$ git branch --set-upstream [branch] [remote-branch]&#13;
&#13;
# 合并指定分支到当前分支&#13;
$ git merge [branch]&#13;
&#13;
# 选择一个commit，合并进当前分支&#13;
$ git cherry-pick [commit]&#13;
&#13;
# 删除分支&#13;
$ git branch -d [branch-name]&#13;
&#13;
# 删除远程分支&#13;
$ git push origin --delete [branch-name]&#13;
$ git branch -dr [remote/branch]&#13;
```&#13;
&#13;
### 标签&#13;
&#13;
```&#13;
# 列出所有tag&#13;
$ git tag&#13;
&#13;
# 新建一个tag在当前commit&#13;
$ git tag [tag]&#13;
&#13;
# 新建一个tag在指定commit&#13;
$ git tag [tag] [commit]&#13;
&#13;
# 删除本地tag&#13;
$ git tag -d [tag]&#13;
&#13;
# 删除远程tag&#13;
$ git push origin :refs/tags/[tagName]&#13;
&#13;
# 查看tag信息&#13;
$ git show [tag]&#13;
&#13;
# 提交指定tag&#13;
$ git push [remote] [tag]&#13;
&#13;
# 提交所有tag&#13;
$ git push [remote] --tags&#13;
&#13;
# 新建一个分支，指向某个tag&#13;
$ git checkout -b [branch] [tag]&#13;
```&#13;
&#13;
### 查看信息&#13;
&#13;
```&#13;
# 显示有变更的文件&#13;
$ git status&#13;
&#13;
# 显示当前分支的版本历史&#13;
$ git log&#13;
&#13;
# 显示commit历史，以及每次commit发生变更的文件&#13;
$ git log --stat&#13;
&#13;
# 搜索提交历史，根据关键词&#13;
$ git log -S [keyword]&#13;
&#13;
# 显示某个commit之后的所有变动，每个commit占据一行&#13;
$ git log [tag] HEAD --pretty=format:%s&#13;
&#13;
# 显示某个commit之后的所有变动，其'提交说明'必须符合搜索条件&#13;
$ git log [tag] HEAD --grep feature&#13;
&#13;
# 显示某个文件的版本历史，包括文件改名&#13;
$ git log --follow [file]&#13;
$ git whatchanged [file]&#13;
&#13;
# 显示指定文件相关的每一次diff&#13;
$ git log -p [file]&#13;
&#13;
# 显示过去5次提交&#13;
$ git log -5 --pretty --oneline&#13;
&#13;
# 显示所有提交过的用户，按提交次数排序&#13;
$ git shortlog -sn&#13;
&#13;
# 显示指定文件是什么人在什么时间修改过&#13;
$ git blame [file]&#13;
&#13;
# 显示暂存区和工作区的差异&#13;
$ git diff&#13;
&#13;
# 显示暂存区和上一个commit的差异&#13;
$ git diff --cached [file]&#13;
&#13;
# 显示工作区与当前分支最新commit之间的差异&#13;
$ git diff HEAD&#13;
&#13;
# 显示两次提交之间的差异&#13;
$ git diff [first-branch]...[second-branch]&#13;
&#13;
# 显示今天你写了多少行代码&#13;
$ git diff --shortstat '@{0 day ago}'&#13;
&#13;
# 显示某次提交的元数据和内容变化&#13;
$ git show [commit]&#13;
&#13;
# 显示某次提交发生变化的文件&#13;
$ git show --name-only [commit]&#13;
&#13;
# 显示某次提交时，某个文件的内容&#13;
$ git show [commit]:[filename]&#13;
&#13;
# 显示当前分支的最近几次提交&#13;
$ git reflog&#13;
```&#13;
&#13;
### 远程同步&#13;
&#13;
```&#13;
# 下载远程仓库的所有变动&#13;
$ git fetch [remote]&#13;
&#13;
# 显示所有远程仓库&#13;
$ git remote -v&#13;
&#13;
# 显示某个远程仓库的信息&#13;
$ git remote show [remote]&#13;
&#13;
# 增加一个新的远程仓库，并命名&#13;
$ git remote add [shortname] [url]&#13;
&#13;
# 取回远程仓库的变化，并与本地分支合并&#13;
$ git pull [remote] [branch]&#13;
&#13;
# 上传本地指定分支到远程仓库&#13;
$ git push [remote] [branch]&#13;
&#13;
# 强行推送当前分支到远程仓库，即使有冲突&#13;
$ git push [remote] --force&#13;
&#13;
# 推送所有分支到远程仓库&#13;
$ git push [remote] --all&#13;
```&#13;
&#13;
### 撤销&#13;
&#13;
```&#13;
# 恢复暂存区的指定文件到工作区&#13;
$ git checkout [file]&#13;
&#13;
# 恢复某个commit的指定文件到暂存区和工作区&#13;
$ git checkout [commit] [file]&#13;
&#13;
# 恢复暂存区的所有文件到工作区&#13;
$ git checkout .&#13;
&#13;
# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变&#13;
$ git reset [file]&#13;
&#13;
# 重置暂存区与工作区，与上一次commit保持一致&#13;
$ git reset --hard&#13;
&#13;
# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变&#13;
$ git reset [commit]&#13;
&#13;
# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致&#13;
$ git reset --hard [commit]&#13;
&#13;
# 重置当前HEAD为指定commit，但保持暂存区和工作区不变&#13;
$ git reset --keep [commit]&#13;
&#13;
# 新建一个commit，用来撤销指定commit&#13;
# 后者的所有变化都将被前者抵消，并且应用到当前分支&#13;
$ git revert [commit]&#13;
&#13;
暂时将未提交的变化移除，稍后再移入&#13;
$ git stash&#13;
$ git stash pop&#13;
```&#13;
&#13;
### 其他&#13;
&#13;
```&#13;
# 生成一个可供发布的压缩包&#13;
$ git archive。</description><guid isPermaLink="true">https://Oldbuck.github.io/post/Git-chang-yong-ming-ling.html</guid><pubDate>Sat, 11 Jan 2025 03:32:12 +0000</pubDate></item><item><title>markdown测试页面</title><link>https://Oldbuck.github.io/post/markdown-ce-shi-ye-mian.html</link><description>这是一个markdown格式的测试页面，也是个人经常会使用的格式记录。</description><guid isPermaLink="true">https://Oldbuck.github.io/post/markdown-ce-shi-ye-mian.html</guid><pubDate>Thu, 09 Jan 2025 14:23:28 +0000</pubDate></item><item><title>博客测试</title><link>https://Oldbuck.github.io/post/bo-ke-ce-shi.html</link><description>今天在v2ex上发现了一个在`github`上用[Gmeek](https://github.com/Meekdai/Gmeek)快速搭建博客的方式。</description><guid isPermaLink="true">https://Oldbuck.github.io/post/bo-ke-ce-shi.html</guid><pubDate>Thu, 09 Jan 2025 12:50:40 +0000</pubDate></item></channel></rss>